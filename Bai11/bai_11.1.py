#              'C': [0x3C, 0x66, 0xC3, 0xC0, 0xC0, 0xC3, 0x66, 0x3C],
#              'D': [0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8],
#              'E': [0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0xFE],
#              'F': [0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xF0],
#              'G': [0x3C, 0x66, 0xC3, 0xC0, 0xCF, 0xC3, 0x66, 0x3C],
#              'H': [0xC3, 0xC3, 0xC3, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3],
#              'I': [0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C],
#              'J': [0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x98, 0xF0],
#              'K': [0xC3, 0xC6, 0xCC, 0xD8, 0xF0, 0xD8, 0xCC, 0xC6],
#              'L': [0xF0, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE],
#              'M': [0xC3, 0xE7, 0xFF, 0xDB, 0xC3, 0xC3, 0xC3, 0xC3],
#              'N': [0xC3, 0xE3, 0xF3, 0xDB, 0xCF, 0xC7, 0xC3, 0xC3],
#              'O': [0x3C, 0x66, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x3C],
#              'P': [0xFC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0],
#              'Q': [0x3C, 0x66, 0xC3, 0xC3, 0xC3, 0xDB, 0x6E, 0x3B],
#              'R': [0xFC, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xC6],
#              'S': [0x7C, 0xC6, 0xC0, 0xC0, 0x7C, 0x06, 0x06, 0xFC],
#              'T': [0xFF, 0xDB, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C],
#              '3': [0x3E, 0x63, 0x03, 0x1E, 0x03, 0x03, 0x63, 0x3E],
#              '4': [0x06, 0x0E, 0x1E, 0x36, 0x66, 0x7F, 0x06, 0x06],
#              '5': [0x7F, 0x60, 0x60, 0x7E, 0x03, 0x03, 0x63, 0x3E],
#              '6': [0x3E, 0x63, 0x60, 0x7E, 0x63, 0x63, 0x63, 0x3E],
#              '7': [0x7F, 0x63, 0x03, 0x06, 0x0C, 0x18, 0x18, 0x18],
#              '8': [0x3E, 0x63, 0x63, 0x3E, 0x63, 0x63, 0x63, 0x3E],
#              '9': [0x3E, 0x63, 0x63, 0x63, 0x3F, 0x03, 0x63, 0x3E],

import RPi.GPIO as GPIO
import time

CLK = 11
DIN = 10
CS = 8

character = {'A': [0x3C, 0x66, 0xC3, 0xC3, 0xFF, 0xC3, 0xC3, 0xC3],
             'B': [0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0xFC],
             '0': [0x3C, 0x66, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x3C],
             '1': [0x10, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38],
             '2': [0x3E, 0x63, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x7F],
             '3': [0x3E, 0x63, 0x03, 0x1E, 0x03, 0x03, 0x63, 0x3E],
             '4': [0x06, 0x0E, 0x1E, 0x36, 0x66, 0x7F, 0x06, 0x06],
             '5': [0x7F, 0x60, 0x60, 0x7E, 0x03, 0x03, 0x63, 0x3E],
             '6': [0x3E, 0x63, 0x60, 0x7E, 0x63, 0x63, 0x63, 0x3E],
             '7': [0x7F, 0x63, 0x03, 0x06, 0x0C, 0x18, 0x18, 0x18],
             '8': [0x3E, 0x63, 0x63, 0x3E, 0x63, 0x63, 0x63, 0x3E],
             '9': [0x3E, 0x63, 0x63, 0x63, 0x3F, 0x03, 0x63, 0x3E],
             '+': [0x00, 0x18, 0x18, 0x7E, 0x7E, 0x18, 0x18, 0x00],
             '-': [0x00, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0x00],
             'x': [0x00, 0xC3, 0x66, 0x3C, 0x3C, 0x66, 0xC3, 0x00],
             '/': [0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x00], }

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

GPIO.setup(CLK, GPIO.OUT)
GPIO.setup(DIN, GPIO.OUT)
GPIO.setup(CS, GPIO.OUT)


def spi_send_byte(register, data):
    GPIO.output(CS, GPIO.LOW)
    for bit in range(8):
        GPIO.output(CLK, GPIO.LOW)
        GPIO.output(DIN, (register >> (7 - bit)) & 0x01)
        GPIO.output(CLK, GPIO.HIGH)
    for bit in range(8):
        GPIO.output(CLK, GPIO.LOW)
        GPIO.output(DIN, (data >> (7 - bit)) & 0x01)
        GPIO.output(CLK, GPIO.HIGH)
    GPIO.output(CS, GPIO.HIGH)


def max7219_init():
    spi_send_byte(0x0F, 0x00)
    spi_send_byte(0x09, 0x00)
    spi_send_byte(0x0B, 0x07)
    spi_send_byte(0x0A, 0x00)
    spi_send_byte(0x0C, 0x01)


def clear_display():
    for row in range(1, 9):
        spi_send_byte(row, 0x00)


def display_pattern(character):
    for row in range(8):
        spi_send_byte(row + 1, character[row])


def display_pattern_180(pattern):
    pattern_180 = [int('{:08b}'.format(row)[::-1], 2) for row in pattern[::-1]]
    for row in range(8):
        spi_send_byte(row + 1, pattern_180[row])


def main():
    max7219_init()
    clear_display()
    while True:
        # time.sleep(1)
        # display_pattern(character['A'])
        # time.sleep(1)
        # clear_display()
        for key in character:
            display_pattern(character[key])
            time.sleep(1.5)
            clear_display()


try:
    main()
except KeyboardInterrupt:
    clear_display()
    GPIO.cleanup()
